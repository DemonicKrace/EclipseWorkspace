package hw1;
import java.util.Arrays;
public class hw1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//(1)-f：在main()中，建立CTriangle的物件陣列objArr，
		//並使用迴圈呼叫10次makeThreeNum()，取得10組數值，
		//並利用這10組數值作為objArr[0]~objArr[9]的成員值（若不合法，則該物件之成員會自動被設定為3,4,5）。

		CTriangle[] objArr = new CTriangle[10];
		int n[];
		for(int i = 0; i < 10 ;i++){
			n = makeThreeNum();
			
			int n0 = n[0];
			int n1 = n[1];
			int n2 = n[2];
			objArr[i] = new CTriangle(n0,n1,n2);
			
			
//			objArr[i] = new CTriangle(n[0],n[1],n[2]);
		}
		
		//(1)-g：在main()中，手動修正objArr[9]的三個成員值為(20,21,29)。
		objArr[9].edge1 = 20;
		objArr[9].edge2 = 21;
		objArr[9].edge3 = 29;

		//(1)-h：在main()函式中，印出物件陣列的10個三角形的邊，並判斷是否為直角三角形。
		for(int i = 0 ; i < 10 ;i++){
			System.out.printf("%d,%d,%d isRightAngled = %s\n",objArr[i].edge1,objArr[i].edge1,objArr[i].edge1,objArr[i].isRightAngled());
		}
		
		/*
		if(n.length == 3){
			System.out.println(n[0]);
			System.out.println(n[1]);
			System.out.println(n[2]);
		}
		*/
	}

	//(1)-e：撰寫一個產生三個亂數的主類別函式int [] makeThreeNum()。三個數存放於陣列中。
	//陣列[0]之值為介於5~29的整數。
	//陣列[1]之值為介於9~49的整數。
	//陣列[2]之值為介於29~89的整數。
	static int[] makeThreeNum(){
//		5~29, 9~49, 29~89
		int n1 = (int)(Math.random() * (29-5+1)) + 5;
		int n2 = (int)(Math.random() * (49-9+1)) + 9;
		int n3 = (int)(Math.random() * (89-29+1)) + 29;
		int n[] = {n1,n2,n3};
		return n;
	}
}

class CTriangle{
	//設計一個三角形類別，當中包含三項公用資料如下：
	public int edge1;
	public int edge2;
	public int edge3;
	
	//(1)-c：設計一個建構子，接受三個整數引數a,b,c，內容為利用isLegal判定輸入的引數是否可構成三角形，
	//若無法構成，則設定三個邊為3,4,5（請呼叫(1)-a來完成），若可構成三角形，則設定a,b,c為三個邊的值。
	public CTriangle(int a,int b,int c){
		//先升冪排序
		int e[] = {a , b , c};
		Arrays.sort(e);
		if(isLegal(e[0],e[1],e[2])){
			this.edge1 = e[0] ;
			this.edge2 = e[1] ;
			this.edge3 = e[2] ;
		}else{
			this.edge1 = 3;
			this.edge2 = 4;
			this.edge3 = 5;
		}
	}
	
	//(1)-a：設計一個無參數的建構子。功能為設定三個邊為3,4,5。
	public CTriangle(){
		this(3,4,5);
	}
	
	
	
	//(1)-b：設計一個類別方法(class method)，boolean isLegal(int a,int b,int c)，用以判斷a,b,c是否能夠成為三角形的邊。其中
	//須符合a≦b≦c，否則回傳false。
	//須符合 |另兩邊的差| < 第三邊 < 另兩邊的和，否則回傳false。
	private boolean isLegal(int a,int b,int c){ 
		return (edge1 <= edge2 && edge2 <= edge3) && (edge2 - edge1 < edge3 && edge1 + edge2 < edge3);			
	}
	
	//(1)-d：設計一個方法boolean isRightAngled()，使用畢氏定理判定是否為直角三角形。
	public boolean isRightAngled(){
		return (edge1 * edge1 + edge2 * edge2 == edge3 * edge3) ;
	}
}